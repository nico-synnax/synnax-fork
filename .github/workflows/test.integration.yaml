name: Test - Integration (End-to-End)

on:
  push:
    branches:
      - "sy-2769-integration-test-development"
  workflow_dispatch:

env:
  CACHE_SCOPE: build-synnax

jobs:
  build:
    name: Build Synnax
    runs-on: [self-hosted, linux]
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Force Quit Synnax Processes
        run: |
          mkdir -p $HOME/Desktop
          rm -rf $HOME/Desktop/*
          echo "Checking for existing synnax processes..."
          if pgrep -f "synnax" > /dev/null; then
            echo "Found synnax processes. Terminating..."
            pkill -f "synnax" || true
            sleep 2
            # Force kill if still running
            if pgrep -f "synnax" > /dev/null; then
              echo "Force killing remaining synnax processes..."
              pkill -9 -f "synnax" || true
            fi
            echo "All synnax processes terminated."
          else
            echo "No synnax processes found."
          fi

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc \
            g++ \
            cmake \
            libsystemd-dev \
            pkg-config

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ env.CACHE_SCOPE }}-self-hosted-linux
          repository-cache: true

      - name: Build Driver
        run: |
          bazel build --enable_platform_specific_config -c opt --config=hide_symbols --announce_rc //driver

      - name: Get Version
        id: version
        working-directory: synnax
        run: |
          echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT

      - name: Move Driver to Assets
        run: |
          mkdir -p synnax/pkg/service/hardware/embedded/assets
          cp bazel-bin/driver/driver synnax/pkg/service/hardware/embedded/assets/driver

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Download Go Dependencies
        working-directory: synnax
        run: go mod download

      - name: Build Synnax Server
        working-directory: synnax
        run: |
          go build -tags driver -o synnax-v${{ steps.version.outputs.VERSION }}-linux

      - name: Copy Binaries to Desktop
        run: |      
          cp bazel-bin/driver/driver $HOME/Desktop/synnax-driver
          cp synnax/synnax-v${{ steps.version.outputs.VERSION }}-linux $HOME/Desktop/synnax
          echo "Binaries created in $HOME/Desktop:"
          ls -la $HOME/Desktop/synnax*

  deploy:
    name: Deploy Synnax Service
    runs-on: [self-hosted, linux]
    needs: build
    steps:
      - name: Install and Start Synnax as Service
        run: |
          # Create necessary directories with proper permissions
          sudo mkdir -p /var/lib/synnax-driver
          sudo chown $USER:$USER /var/lib/synnax-driver
          sudo chmod 755 /var/lib/synnax-driver
          
          # Create local data directory
          mkdir -p $HOME/synnax-data
          
          # Create systemd service
          sudo tee /etc/systemd/system/synnax.service > /dev/null <<EOF
          [Unit]
          Description=Synnax Server
          After=network.target
          
          [Service]
          Type=simple
          User=$USER
          WorkingDirectory=$HOME/synnax-data
          ExecStart=$HOME/Desktop/synnax start -mi
          Restart=always
          RestartSec=5
          StandardOutput=journal
          StandardError=journal
          Environment=SYNNAX_DATA_DIR=$HOME/synnax-data
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Start the service
          sudo systemctl daemon-reload
          sudo systemctl stop synnax || true
          sudo systemctl enable synnax
          sudo systemctl start synnax
          
          # Wait for service to start
          sleep 15
          
          # Verify service is running and responding
          if sudo systemctl is-active --quiet synnax; then
            if timeout 10 bash -c 'until nc -z localhost 9090; do sleep 1; done'; then
              echo "Synnax service is running and responding on port 9090"
            else
              echo "Service is running but not responding on port 9090"
              sudo journalctl -u synnax --no-pager -n 20
              exit 1
            fi
          else
            echo "Service failed to start"
            sudo journalctl -u synnax --no-pager -n 20
            exit 1
          fi

  test:
    name: Run Test Conductor
    runs-on: [self-hosted, linux]
    needs: deploy
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Set up Poetry
        run: |
          sudo apt-get update
          sudo apt-get install -y curl python3-pip
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry --version

      - name: Install System Dependencies for Matplotlib
        run: |
          sudo apt-get install -y \
            libfreetype6-dev \
            libpng-dev \
            libjpeg-dev \

      - name: Install Dependencies
        working-directory: integration/py
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry env remove --all || true
          poetry add "pydantic>=2.11.5,<3.0" --no-cache
          poetry install --no-cache

      - name: Debug Imports
        working-directory: integration/py
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run python -c "
          try:
              import synnax
              print('Synnax imported successfully')
          except Exception as e:
              print(f'Error importing synnax: {e}')
              import traceback
              traceback.print_exc()
          
          try:
              import matplotlib
              matplotlib.use('Agg')  # Test non-interactive backend
              import matplotlib.pyplot as plt
              print('Matplotlib imported successfully')
          except Exception as e:
              print(f'Error importing matplotlib: {e}')
              import traceback
              traceback.print_exc()
          "

      - name: Run Conductor Test
        working-directory: integration/test/py/framework
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run --directory ../../py python3 framework/Test_Conducter.py --name test_conductor --sequence ../testcases/basic_tests.json