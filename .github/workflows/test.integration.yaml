name: Test - Integration

on:
  push:
    branches:
      - "sy-2769-integration-test-development"
  workflow_dispatch:

env:
  CACHE_SCOPE: deploy-synnax
  # =============================================================================
  # DEVELOPMENT MODE: Skip Build & Use Reference Artifacts
  # =============================================================================
  # INSTRUCTIONS FOR RAPID ITERATION:
  #
  # 1. Find a successful workflow run with good binaries:
  #    - Go to: https://github.com/synnaxlabs/synnax/actions/workflows/test.integration.yaml
  #    - Find a run where all build jobs succeeded (green checkmarks)
  #    - Click on the run and copy the run ID from the URL
  #      Example: https://github.com/synnaxlabs/synnax/actions/runs/12345678901
  #      The run ID is: 12345678901
  #
  # 2. Update REFERENCE_RUN_ID below with your run ID
  # 3. Comment out the entire 'build:' job (see instructions below)
  # 4. Remove 'needs: build' from deploy job (see instructions below)
  # 5. Commit and push - deploy/test will use artifacts from reference run
  #
  # TO REVERT TO NORMAL MODE:
  # - Uncomment the 'build:' job
  # - Add back 'needs: build' to deploy job
  # - Comment out or remove REFERENCE_RUN_ID
  # =============================================================================
  # REFERENCE_RUN_ID: "17271306310" #

jobs:
  # build-ubuntu-22-04:
  #   name: Build Synnax (Ubuntu-22.04)
  #   timeout-minutes: 60
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Update Submodules
  #       run: git submodule update --init --recursive

  #     - name: Setup Bazel
  #       uses: bazel-contrib/setup-bazel@0.15.0
  #       with:
  #         bazelisk-cache: true
  #         disk-cache: deploy-synnax-ubuntu-22.04
  #         repository-cache: true

  #     - name: Build Driver
  #       run: |
  #         bazel build --enable_platform_specific_config -c opt --define=platform=nilinuxrt --announce_rc //driver

  #     - name: Move Driver to Assets
  #       shell: bash
  #       run: |
  #         mkdir -p synnax/pkg/service/hardware/embedded/assets
  #         cp bazel-bin/driver/driver synnax/pkg/service/hardware/embedded/assets/driver

  #     - name: Get Version
  #       id: version
  #       working-directory: synnax
  #       run: |
  #         echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version-file: go.work
  #         cache-dependency-path: go.work.sum

  #     - name: Download Dependencies
  #       working-directory: synnax
  #       run: go mod download

  #     - name: Build
  #       working-directory: synnax
  #       run: |
  #         go build -tags driver -o synnax-v${{ steps.version.outputs.VERSION }}-nilinuxrt

  #     - name: Test Binary Execution
  #       shell: bash
  #       run: |
  #         echo "Testing binary execution..."
  #         ./synnax/synnax-v${{ steps.version.outputs.VERSION }}-nilinuxrt version || echo "‚ö†Ô∏è Server binary check failed"
  #         bazel-bin/driver/driver --help || echo "‚ö†Ô∏è Driver binary check failed"

  #     - name: Upload Driver Binary as Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: driver-nilinuxrt
  #         path: bazel-bin/driver/driver
  #         retention-days: 7

  #     - name: Upload Server Binary as Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: synnax-server-nilinuxrt
  #         path: synnax/synnax-v${{ steps.version.outputs.VERSION }}-nilinuxrt
  #         retention-days: 7

  #     - name: Debug Build Environment
  #       if: failure()
  #       shell: bash
  #       run: |
  #         echo "üîç Build failed - debugging info:"
  #         echo "=== Go version ==="
  #         go version || echo "Go not found"
  #         echo "=== Bazel version ==="
  #         bazel version || bazelisk version || echo "Bazel/Bazelisk not found"
  #         echo "=== Disk space ==="
  #         df -h || echo "Cannot check disk space"
  #         echo "=== Build outputs ==="
  #         ls -la bazel-bin/driver/ || echo "No driver build output"
  #         ls -la synnax/ | grep synnax-v || echo "No server build output"

  build-ubuntu-latest:
    name: Build Synnax (ubuntu-latest)
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Install Deps On Ubuntu Latest
        run: |
          sudo apt-get update
          sudo apt-get install -y libsystemd-dev

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: deploy-synnax-ubuntu-latest
          repository-cache: true

      - name: Build Driver
        run: |
          bazel build --enable_platform_specific_config -c opt --config=hide_symbols --announce_rc //driver

      - name: Move Driver to Assets
        shell: bash
        run: |
          mkdir -p synnax/pkg/service/hardware/embedded/assets
          cp bazel-bin/driver/driver synnax/pkg/service/hardware/embedded/assets/driver

      - name: Get Version
        id: version
        working-directory: synnax
        run: |
          echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Download Dependencies
        working-directory: synnax
        run: go mod download

      - name: Build
        working-directory: synnax
        run: |
          go build -tags driver -o synnax-v${{ steps.version.outputs.VERSION }}-linux

      - name: Test Binary Execution
        shell: bash
        run: |
          echo "Testing binary execution..."
          ./synnax/synnax-v${{ steps.version.outputs.VERSION }}-linux version || echo "‚ö†Ô∏è Server binary check failed"
          bazel-bin/driver/driver --help || echo "‚ö†Ô∏è Driver binary check failed"

      - name: Upload Driver Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: driver-linux
          path: bazel-bin/driver/driver
          retention-days: 7

      - name: Upload Server Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: synnax-server-linux
          path: synnax/synnax-v${{ steps.version.outputs.VERSION }}-linux
          retention-days: 7

      - name: Debug Build Environment
        if: failure()
        shell: bash
        run: |
          echo "üîç Build failed - debugging info:"
          echo "=== Go version ==="
          go version || echo "Go not found"
          echo "=== Bazel version ==="
          bazel version || bazelisk version || echo "Bazel/Bazelisk not found"
          echo "=== Disk space ==="
          df -h || echo "Cannot check disk space"
          echo "=== Build outputs ==="
          ls -la bazel-bin/driver/ || echo "No driver build output"
          ls -la synnax/ | grep synnax-v || echo "No server build output"

  build-windows-latest:
    name: Build Synnax (windows-latest)
    timeout-minutes: 60
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Windows SDK
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        with:
          sdk-version: 22000

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: deploy-synnax-windows-latest
          repository-cache: true

      - name: Build Driver (Windows)
        run: bazel --output_user_root=C:/tmp build --enable_platform_specific_config -c opt --announce_rc //driver

      - name: Move Driver to Assets
        shell: bash
        run: |
          mkdir -p synnax/pkg/service/hardware/embedded/assets
          cp bazel-bin/driver/driver.exe synnax/pkg/service/hardware/embedded/assets/driver.exe

      - name: Get Version
        id: version
        working-directory: synnax
        run: |
          echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Download Dependencies
        working-directory: synnax
        run: go mod download

      - name: Build
        working-directory: synnax
        run: |
          go build -tags driver -o synnax-v${{ steps.version.outputs.VERSION }}-windows.exe

      - name: Test Binary Execution
        shell: bash
        run: |
          echo "Testing binary execution..."
          ./synnax/synnax-v${{ steps.version.outputs.VERSION }}-windows.exe version || echo "‚ö†Ô∏è Server binary check failed"
          bazel-bin/driver/driver.exe --help || echo "‚ö†Ô∏è Driver binary check failed"

      - name: Upload Driver Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: driver-windows
          path: bazel-bin/driver/driver.exe
          retention-days: 7

      - name: Upload Server Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: synnax-server-windows
          path: synnax/synnax-v${{ steps.version.outputs.VERSION }}-windows.exe
          retention-days: 7

      - name: Debug Build Environment
        if: failure()
        shell: bash
        run: |
          echo "üîç Build failed - debugging info:"
          echo "=== Go version ==="
          go version || echo "Go not found"
          echo "=== Bazel version ==="
          bazel version || bazelisk version || echo "Bazel/Bazelisk not found"
          echo "=== Disk space ==="
          df -h || echo "Cannot check disk space"
          echo "=== Build outputs ==="
          ls -la bazel-bin/driver/ || echo "No driver build output"
          ls -la synnax/ | grep synnax-v || echo "No server build output"

  # build-macos-15:
  #   name: Build Synnax (macos-15)
  #   timeout-minutes: 60
  #   runs-on: macos-15
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Update Submodules
  #       run: git submodule update --init --recursive

  #     - name: Setup Bazel
  #       uses: bazel-contrib/setup-bazel@0.15.0
  #       with:
  #         bazelisk-cache: true
  #         disk-cache: deploy-synnax-macos-15
  #         repository-cache: true

  #     - name: Build Driver
  #       run: |
  #         bazel build --enable_platform_specific_config -c opt --config=hide_symbols --announce_rc //driver

  #     - name: Move Driver to Assets
  #       shell: bash
  #       run: |
  #         mkdir -p synnax/pkg/service/hardware/embedded/assets
  #         cp bazel-bin/driver/driver synnax/pkg/service/hardware/embedded/assets/driver

  #     - name: Get Version
  #       id: version
  #       working-directory: synnax
  #       run: |
  #         echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version-file: go.work
  #         cache-dependency-path: go.work.sum

  #     - name: Download Dependencies
  #       working-directory: synnax
  #       run: go mod download

  #     - name: Build
  #       working-directory: synnax
  #       run: |
  #         go build -tags driver -o synnax-v${{ steps.version.outputs.VERSION }}-macos

  #     - name: Test Binary Execution
  #       shell: bash
  #       run: |
  #         echo "Testing binary execution..."
  #         ./synnax/synnax-v${{ steps.version.outputs.VERSION }}-macos version || echo "‚ö†Ô∏è Server binary check failed"
  #         bazel-bin/driver/driver --help || echo "‚ö†Ô∏è Driver binary check failed"

  #     - name: Upload Driver Binary as Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: driver-macos
  #         path: bazel-bin/driver/driver
  #         retention-days: 7

  #     - name: Upload Server Binary as Artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: synnax-server-macos
  #         path: synnax/synnax-v${{ steps.version.outputs.VERSION }}-macos
  #         retention-days: 7

  #     - name: Debug Build Environment
  #       if: failure()
  #       shell: bash
  #       run: |
  #         echo "üîç Build failed - debugging info:"
  #         echo "=== Go version ==="
  #         go version || echo "Go not found"
  #         echo "=== Bazel version ==="
  #         bazel version || bazelisk version || echo "Bazel/Bazelisk not found"
  #         echo "=== Disk space ==="
  #         df -h || echo "Cannot check disk space"
  #         echo "=== Build outputs ==="
  #         ls -la bazel-bin/driver/ || echo "No driver build output"
  #         ls -la synnax/ | grep synnax-v || echo "No server build output"

  download-artifacts-windows:
    name: Download Artifacts (Windows)
    timeout-minutes: 1
    runs-on:
      - self-hosted
      - windows
    needs: build-windows-latest
    steps:
      - name: Setup GitHub CLI (Windows)
        shell: cmd
        run: |
          where gh >nul 2>nul && (
            echo GitHub CLI already installed
            gh --version
          ) || (
            echo Installing GitHub CLI via Chocolatey...
            choco install gh -y
            refreshenv
            gh --version
          )

      - name: Download Build Artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: driver-windows
          path: ./binaries/
      
      - name: Download Server Artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: synnax-server-windows
          path: ./binaries/

      - name: Setup Binaries (Windows)
        shell: cmd
        run: |
          if not exist "%USERPROFILE%\Desktop" mkdir "%USERPROFILE%\Desktop"
          copy /Y "./binaries/driver.exe" "%USERPROFILE%\Desktop\synnax-driver.exe"
          for %%f in (./binaries/synnax-*-windows.exe) do copy /Y "%%f" "%USERPROFILE%\Desktop\synnax.exe"
          echo Binaries prepared in Desktop:
          dir "%USERPROFILE%\Desktop\synnax*"

  deploy-and-test-windows:
    name: Deploy and Test (windows)
    runs-on:
      - self-hosted
      - windows
    needs: download-artifacts-windows
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Force Quit Existing Synnax Processes (Windows)
        shell: cmd
        run: |
          echo Checking for existing synnax processes on Windows...
          taskkill /F /IM "synnax.exe" 2>nul && echo Killed synnax.exe processes || echo No synnax.exe processes found
          taskkill /F /IM "synnax-driver.exe" 2>nul && echo Killed synnax-driver.exe processes || echo No synnax-driver.exe processes found
          exit /b 0

      - name: Install Poetry & Dependencies
        working-directory: integration/test/py
        shell: powershell
        run: |
          # Install Poetry on Windows
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          # Add Poetry to PATH
          $env:PATH = "$env:APPDATA\Python\Scripts;$env:USERPROFILE\.local\bin;$env:PATH"
          # Remove existing lock file and recreate it fresh
          if (Test-Path "poetry.lock") { Remove-Item "poetry.lock" }
          poetry install

      - name: Start Synnax Server
        timeout-minutes: 1
        shell: powershell
        run: |
          # Create data directory
          if (-not (Test-Path "$env:USERPROFILE\synnax-data")) {
            New-Item -ItemType Directory -Path "$env:USERPROFILE\synnax-data"
          }
          
          # Start Synnax using PowerShell Start-Process which creates a truly detached process
          Set-Location "$env:USERPROFILE\synnax-data"
          $synnaxPath = "$env:USERPROFILE\Desktop\synnax.exe"
          
          Write-Host "Starting Synnax server..."
          $process = Start-Process -FilePath $synnaxPath -ArgumentList "start", "-mi" -WindowStyle Hidden -PassThru -WorkingDirectory "$env:USERPROFILE\synnax-data"
          
          # Store the process ID for tracking
          $process.Id | Out-File -FilePath "$env:USERPROFILE\synnax-pid.txt" -Encoding ASCII
          Write-Host "Started Synnax with PID: $($process.Id)"
          
          # Wait for startup and verify it's still running
          Start-Sleep -Seconds 15
          
          $synnaxProcess = Get-Process -Id $process.Id -ErrorAction SilentlyContinue
          if ($synnaxProcess) {
            Write-Host "Synnax is running with PID: $($synnaxProcess.Id)"
            
            # Verify port 9090 is listening
            $portReady = $false
            for ($i = 1; $i -le 5; $i++) {
              $connection = Test-NetConnection -ComputerName localhost -Port 9090 -WarningAction SilentlyContinue
              if ($connection.TcpTestSucceeded) {
                Write-Host "Port 9090 is ready"
                $portReady = $true
                break
              }
              Write-Host "Waiting for port 9090... (attempt $i/5)"
              Start-Sleep -Seconds 3
            }
            
            if (-not $portReady) {
              Write-Host "ERROR: Port 9090 never became available"
              exit 1
            }
          } else {
            Write-Host "ERROR: Synnax process died during startup"
            exit 1
          }

      - name: Test Conductor
        id: test-conductor
        timeout-minutes: 5
        working-directory: integration/test/py
        shell: powershell
        env:
          PYTHONIOENCODING: utf-8
        run: |
          # Verify Synnax is still running
          $synnaxPid = Get-Content "$env:USERPROFILE\synnax-pid.txt" -ErrorAction SilentlyContinue
          if ($synnaxPid -and (Get-Process -Id $synnaxPid -ErrorAction SilentlyContinue)) {
            Write-Host "Synnax is running with PID: $synnaxPid"
          } else {
            Write-Host "ERROR: Synnax process not running"
            exit 1
          }
          
          # Run tests with UTF-8 encoding
          $env:PYTHONIOENCODING = "utf-8"
          $env:PYTHONUTF8 = "1"
          $env:PATH = "$env:APPDATA\Python\Scripts;$env:USERPROFILE\.local\bin;$env:PATH"
          poetry run test-conductor --name test-conductor-windows --sequence testcases/basic_tests.json

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: steps.test-conductor.outcome == 'success' || steps.test-conductor.outcome == 'failure'
        with:
          name: test-results-windows
          path: |
            integration/test/py/*.png
            integration/test/py/*.log
            integration/test/py/*.json
          retention-days: 30

      - name: Debug Test Environment
        if: failure()
        shell: powershell
        run: |
          Write-Host "Test failed - debugging info:"
          Write-Host "Matrix OS: windows"
          Write-Host "=== Python/Poetry environment ==="
          python --version
          $env:PATH = "$env:APPDATA\Python\Scripts;$env:USERPROFILE\.local\bin;$env:PATH"
          poetry --version
          Write-Host "=== Synnax connectivity ==="
          try {
            $connection = Test-NetConnection -ComputerName localhost -Port 9090 -WarningAction SilentlyContinue
            if ($connection.TcpTestSucceeded) {
              Write-Host "Port 9090 reachable"
            } else {
              Write-Host "Port 9090 unreachable"
            }
          } catch {
            Write-Host "Cannot test port 9090"
          }
          Write-Host "=== Service status ==="
          Get-Process | Where-Object {$_.ProcessName -like "*synnax*"} | Format-Table -Property ProcessName, Id
          if (-not (Get-Process | Where-Object {$_.ProcessName -like "*synnax*"})) {
            Write-Host "No synnax processes found"
          }
          Write-Host "=== Test artifacts ==="
          if (Test-Path "integration/test/py") {
            Get-ChildItem "integration/test/py" -File | Select-Object Name, Length, LastWriteTime | Format-Table
          } else {
            Write-Host "No test directory found"
          }

  # download-artifacts-macos:
  #   name: Download Artifacts (macos)
  #   timeout-minutes: 1
  #   runs-on:
  #     - self-hosted
  #     - macos
  #   needs: build-macos-15
  #   steps:
  #     - name: Install GitHub CLI
  #       run: |
  #         if ! command -v gh &> /dev/null; then
  #           echo "Installing GitHub CLI via Homebrew..."
  #           /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || echo "Homebrew already installed"
  #           brew install gh
  #         else
  #           echo "GitHub CLI already installed"
  #         fi

  #     - name: Download Build Artifacts (macOS)
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: driver-macos
  #         path: ./binaries/
  #     
  #     - name: Download Server Artifacts (macOS)
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: synnax-server-macos
  #         path: ./binaries/

  #     - name: Setup Binaries (macOS)
  #       run: |
  #         mkdir -p $HOME/synnax-binaries
  #         cp ./binaries/driver $HOME/synnax-binaries/synnax-driver
  #         cp ./binaries/synnax-*-macos $HOME/synnax-binaries/synnax
  #         chmod +x $HOME/synnax-binaries/synnax*
  #         echo "Binaries prepared in $HOME/synnax-binaries:"
  #         ls -la $HOME/synnax-binaries/synnax*

  # deploy-and-test-macos:
  #   name: Deploy and Test (macos)
  #   runs-on:
  #     - self-hosted
  #     - macos
  #   needs: download-artifacts-macos
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Update Submodules
  #       run: git submodule update --init --recursive

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.12"

  #     - name: Force Quit Existing Synnax Processes
  #       shell: bash
  #       run: |
  #         echo "Checking for existing synnax processes..."
  #         pkill -f "synnax" 2>/dev/null && echo "Killed synnax processes" || echo "No synnax processes found"
  #         sleep 2
  #         pkill -9 -f "synnax" 2>/dev/null || true
  #         exit 0

  #     - name: Install Poetry & Dependencies
  #       working-directory: integration/test/py
  #       run: |
  #         # Install Poetry and dependencies via pyproject.toml
  #         curl -sSL https://install.python-poetry.org | python3 -
  #         export PATH="$HOME/.local/bin:$PATH"
  #         poetry install

  #     - name: Start Synnax Server
  #       timeout-minutes: 1
  #       shell: bash
  #       run: |
  #         # Create data directory
  #         mkdir -p $HOME/synnax-data
  #         
  #         # Start Synnax in background
  #         cd $HOME/synnax-data
  #         $HOME/synnax-binaries/synnax start -mi &
  #         
  #         # Wait for startup
  #         sleep 10
  #         
  #         # Verify Synnax is running
  #         if pgrep -f "synnax" >/dev/null; then
  #           echo "Synnax is running"
  #           
  #           # Verify port 9090 is listening
  #           portReady=false
  #           for i in {1..5}; do
  #             if nc -z localhost 9090; then
  #               echo "Port 9090 is ready"
  #               portReady=true
  #               break
  #             fi
  #             echo "Waiting for port 9090... (attempt $i/5)"
  #             sleep 3
  #           done
  #           
  #           if [ "$portReady" = false ]; then
  #             echo "ERROR: Port 9090 never became available"
  #             exit 1
  #           fi
  #         else
  #           echo "ERROR: Synnax process not found after startup"
  #           exit 1
  #         fi

  #     - name: Test Conductor
  #       id: test-conductor
  #       timeout-minutes: 5
  #       working-directory: integration/test/py
  #       run: |
  #         export PATH="$HOME/.local/bin:$PATH"
  #         poetry run test-conductor --name test-conductor-macos --sequence testcases/basic_tests.json

  #     - name: Upload Test Results
  #       uses: actions/upload-artifact@v4
  #       if: steps.test-conductor.outcome == 'success' || steps.test-conductor.outcome == 'failure'
  #       with:
  #         name: test-results-macos
  #         path: |
  #           integration/test/py/*.png
  #           integration/test/py/*.log
  #           integration/test/py/*.json
  #         retention-days: 30

  #     - name: Debug Test Environment
  #       if: failure()
  #       shell: bash
  #       run: |
  #         echo "üîç Test failed - debugging info:"
  #         echo "Matrix OS: macos"
  #         echo "=== Python/Poetry environment ==="
  #         export PATH="$HOME/.local/bin:$PATH"
  #         python --version || echo "Python not found"
  #         poetry --version || echo "Poetry not found"
  #         echo "=== Synnax connectivity ==="
  #         if command -v nc &> /dev/null; then
  #           nc -z localhost 9090 && echo "‚úÖ Port 9090 reachable" || echo "‚ùå Port 9090 unreachable"
  #         elif command -v telnet &> /dev/null; then
  #           timeout 5 telnet localhost 9090 && echo "‚úÖ Port 9090 reachable" || echo "‚ùå Port 9090 unreachable"
  #         else
  #           echo "No network testing tools available"
  #         fi
  #         echo "=== Service status ==="
  #         ps aux | grep -v grep | grep synnax || echo "No synnax processes found"
  #         echo "=== Test artifacts ==="
  #         find integration/test/py -name "*.png" -o -name "*.log" -o -name "*.json" | head -10

  download-artifacts-linux:
    name: Download Artifacts (Linux)
    timeout-minutes: 1
    runs-on:
      - self-hosted
      - Linux
    needs: build-ubuntu-latest
    steps:
      - name: Install GitHub CLI
        run: |
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          else
            echo "GitHub CLI already installed"
          fi

      - name: Download Build Artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: driver-linux
          path: ./binaries/
      
      - name: Download Server Artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: synnax-server-linux
          path: ./binaries/

      - name: Setup Binaries (Linux)
        run: |
          # Create a binaries directory in a reliable location
          mkdir -p $HOME/synnax-binaries
          cp ./binaries/driver $HOME/synnax-binaries/synnax-driver
          cp ./binaries/synnax-*-linux $HOME/synnax-binaries/synnax
          chmod +x $HOME/synnax-binaries/synnax*
          echo "Binaries prepared in $HOME/synnax-binaries:"
          ls -la $HOME/synnax-binaries/synnax*

  deploy-and-test-linux:
    name: Deploy and Test (linux)
    runs-on:
      - self-hosted
      - Linux
    needs: download-artifacts-linux
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Force Quit Existing Synnax Processes
        shell: bash
        run: |
          echo "Checking for existing synnax processes..."
          pkill -f "synnax" 2>/dev/null && echo "Killed synnax processes" || echo "No synnax processes found"
          sleep 2
          pkill -9 -f "synnax" 2>/dev/null || true
          exit 0

      - name: Install Poetry & Dependencies
        working-directory: integration/test/py
        run: |
          # Install Poetry and dependencies via pyproject.toml
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry install

      - name: Start Synnax Server
        timeout-minutes: 1
        shell: bash
        run: |
          # Create data directory
          mkdir -p $HOME/synnax-data
          
          # Start Synnax in background
          cd $HOME/synnax-data
          $HOME/synnax-binaries/synnax start -mi &
          
          # Wait for startup
          sleep 10
          
          # Verify Synnax is running
          if pgrep -f "synnax" >/dev/null; then
            echo "Synnax is running"
            
            # Verify port 9090 is listening
            portReady=false
            for i in {1..5}; do
              if nc -z localhost 9090; then
                echo "Port 9090 is ready"
                portReady=true
                break
              fi
              echo "Waiting for port 9090... (attempt $i/5)"
              sleep 3
            done
            
            if [ "$portReady" = false ]; then
              echo "ERROR: Port 9090 never became available"
              exit 1
            fi
          else
            echo "ERROR: Synnax process not found after startup"
            exit 1
          fi

      - name: Test Conductor
        id: test-conductor
        timeout-minutes: 5
        working-directory: integration/test/py
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run test-conductor --name test-conductor-linux --sequence testcases/basic_tests.json

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: steps.test-conductor.outcome == 'success' || steps.test-conductor.outcome == 'failure'
        with:
          name: test-results-linux
          path: |
            integration/test/py/*.png
            integration/test/py/*.log
            integration/test/py/*.json
          retention-days: 30

      - name: Debug Test Environment
        if: failure()
        shell: bash
        run: |
          echo "üîç Test failed - debugging info:"
          echo "Matrix OS: Linux"
          echo "=== Python/Poetry environment ==="
          export PATH="$HOME/.local/bin:$PATH"
          python --version || echo "Python not found"
          poetry --version || echo "Poetry not found"
          echo "=== Synnax connectivity ==="
          if command -v nc &> /dev/null; then
            nc -z localhost 9090 && echo "‚úÖ Port 9090 reachable" || echo "‚ùå Port 9090 unreachable"
          elif command -v telnet &> /dev/null; then
            timeout 5 telnet localhost 9090 && echo "‚úÖ Port 9090 reachable" || echo "‚ùå Port 9090 unreachable"
          else
            echo "No network testing tools available"
          fi
          echo "=== Service status ==="
          ps aux | grep -v grep | grep synnax || echo "No synnax processes found"
          echo "=== Test artifacts ==="
          find integration/test/py -name "*.png" -o -name "*.log" -o -name "*.json" | head -10