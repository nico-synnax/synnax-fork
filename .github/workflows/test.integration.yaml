name: Test - Integration

on:
  push:
    branches:
      - "sy-2769-integration-test-development"
  workflow_dispatch:

env:
  CACHE_SCOPE: deploy-synnax
  # =============================================================================
  # DEVELOPMENT MODE: Skip Build & Use Reference Artifacts
  # =============================================================================
  # INSTRUCTIONS FOR RAPID ITERATION:
  #
  # 1. Find a successful workflow run with good binaries:
  #    - Go to: https://github.com/synnaxlabs/synnax/actions/workflows/test.integration.yaml
  #    - Find a run where all build jobs succeeded (green checkmarks)
  #    - Click on the run and copy the run ID from the URL
  #      Example: https://github.com/synnaxlabs/synnax/actions/runs/12345678901
  #      The run ID is: 12345678901
  #
  # 2. Update REFERENCE_RUN_ID below with your run ID
  # 3. Comment out the entire 'build:' job (see instructions below)
  # 4. Remove 'needs: build' from deploy job (see instructions below)
  # 5. Commit and push - deploy/test will use artifacts from reference run
  #
  # TO REVERT TO NORMAL MODE:
  # - Uncomment the 'build:' job
  # - Add back 'needs: build' to deploy job
  # - Comment out or remove REFERENCE_RUN_ID
  # =============================================================================
  # REFERENCE_RUN_ID: "17271306310" #

jobs:
  build-ubuntu-22-04:
    name: Build Synnax (Ubuntu-22.04)
    timeout-minutes: 60
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: deploy-synnax-ubuntu-22.04
          repository-cache: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Build Synnax (Ubuntu 22.04 - NI Linux RT)
        id: version
        run: echo "Ubuntu 22.04 build disabled - hardware not available"
        # run: integration/scripts/build-ubuntu-22-04.sh

      - name: Upload Driver Binary as Artifact
        uses: actions/upload-artifact@v4
        if: false  # Disabled until hardware available
        with:
          name: driver-nilinuxrt
          path: bazel-bin/driver/driver
          retention-days: 7

      - name: Upload Server Binary as Artifact
        uses: actions/upload-artifact@v4
        if: false  # Disabled until hardware available
        with:
          name: synnax-server-nilinuxrt
          path: synnax/synnax-v${{ steps.version.outputs.VERSION }}-nilinuxrt
          retention-days: 7

      - name: Debug Build Environment
        if: failure()
        run: echo "Ubuntu 22.04 build debug disabled - hardware not available"
        # run: integration/scripts/debug-build-environment-ubuntu.sh

  build-ubuntu-latest:
    name: Build Synnax (ubuntu-latest)
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: deploy-synnax-ubuntu-latest
          repository-cache: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Build Synnax (Ubuntu Latest)
        id: version
        run: integration/scripts/build-ubuntu-latest.sh

      - name: Upload Driver Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: driver-linux
          path: bazel-bin/driver/driver
          retention-days: 7

      - name: Upload Server Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: synnax-server-linux
          path: synnax/synnax-v${{ steps.version.outputs.VERSION }}-linux
          retention-days: 7

      - name: Debug Build Environment
        if: failure()
        run: integration/scripts/debug-build-environment-ubuntu.sh

  build-windows-latest:
    name: Build Synnax (windows-latest)
    timeout-minutes: 60
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Windows SDK
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        with:
          sdk-version: 22000

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: deploy-synnax-windows-latest
          repository-cache: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Build Synnax (Windows Latest)
        id: version
        shell: cmd
        run: integration/scripts/build-windows-latest.cmd

      - name: Upload Driver Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: driver-windows
          path: bazel-bin/driver/driver.exe
          retention-days: 7

      - name: Upload Server Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: synnax-server-windows
          path: synnax/synnax-v${{ steps.version.outputs.VERSION }}-windows.exe
          retention-days: 7

      - name: Debug Build Environment
        if: failure()
        shell: cmd
        run: integration/scripts/debug-build-environment-windows.cmd

  build-macos-15:
    name: Build Synnax (macos-15)
    timeout-minutes: 60
    runs-on: macos-15
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: deploy-synnax-macos-15
          repository-cache: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Build Synnax (macOS)
        id: version
        run: echo "macOS build disabled - hardware not available"
        # run: integration/scripts/build-macos-15.sh

      - name: Upload Driver Binary as Artifact
        uses: actions/upload-artifact@v4
        if: false  # Disabled until hardware available
        with:
          name: driver-macos
          path: bazel-bin/driver/driver
          retention-days: 7

      - name: Upload Server Binary as Artifact
        uses: actions/upload-artifact@v4
        if: false  # Disabled until hardware available
        with:
          name: synnax-server-macos
          path: synnax/synnax-v${{ steps.version.outputs.VERSION }}-macos
          retention-days: 7

      - name: Debug Build Environment
        if: failure()
        run: echo "macOS build debug disabled - hardware not available"
        # run: integration/scripts/debug-build-environment-macos.sh

  download-artifacts-windows:
    name: Download Artifacts (Windows)
    timeout-minutes: 1
    runs-on:
      - self-hosted
      - windows
    needs: build-windows-latest
    steps:
      - name: Download Build Artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: driver-windows
          path: ./binaries/
      
      - name: Download Server Artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: synnax-server-windows
          path: ./binaries/

      - name: Setup Windows Artifacts
        shell: cmd
        run: integration/scripts/download-artifacts-windows.cmd

  deploy-and-test-windows:
    name: Deploy and Test (windows)
    runs-on:
      - self-hosted
      - windows
    needs: download-artifacts-windows
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Force Quit Existing Synnax Processes (Windows)
        shell: cmd
        run: integration/scripts/kill-synnax-processes-windows.cmd

      - name: Install Poetry & Dependencies
        shell: powershell
        run: integration/scripts/install-poetry-deps-windows.ps1

      - name: Start Synnax Server
        timeout-minutes: 1
        shell: powershell
        run: integration/scripts/start-synnax-server-windows.ps1

      - name: Test Conductor
        id: test-conductor
        timeout-minutes: 5
        shell: powershell
        env:
          PYTHONIOENCODING: utf-8
        run: integration/scripts/run-test-conductor-windows.ps1

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: steps.test-conductor.outcome == 'success' || steps.test-conductor.outcome == 'failure'
        with:
          name: test-results-windows
          path: |
            integration/test/py/*.png
            integration/test/py/*.log
            integration/test/py/*.json
          retention-days: 30

      - name: Debug Test Environment
        if: failure()
        shell: powershell
        run: integration/scripts/debug-test-environment-windows.ps1

  download-artifacts-macos:
    name: Download Artifacts (macos)
    timeout-minutes: 1
    runs-on:
      - self-hosted
      - macos
    needs: build-macos-15
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts (macOS)
        uses: actions/download-artifact@v4
        with:
          name: driver-macos
          path: ./binaries/
      
      - name: Download Server Artifacts (macOS)
        uses: actions/download-artifact@v4
        with:
          name: synnax-server-macos
          path: ./binaries/

      - name: Setup macOS Artifacts
        run: echo "macOS artifacts setup disabled - hardware not available"
        # run: integration/scripts/download-artifacts-macos.sh

  deploy-and-test-macos:
    name: Deploy and Test (macos)
    runs-on:
      - self-hosted
      - macos
    needs: download-artifacts-macos
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Force Quit Existing Synnax Processes
        run: echo "macOS process cleanup disabled - hardware not available"
        # run: integration/scripts/kill-synnax-processes-macos.sh

      - name: Install Poetry & Dependencies
        run: echo "macOS Poetry installation disabled - hardware not available"
        # run: integration/scripts/install-poetry-deps-macos.sh

      - name: Start Synnax Server
        timeout-minutes: 1
        run: echo "macOS server startup disabled - hardware not available"
        # run: integration/scripts/start-synnax-server-macos.sh

      - name: Test Conductor
        id: test-conductor
        timeout-minutes: 5
        run: echo "macOS test conductor disabled - hardware not available"
        # run: integration/scripts/run-test-conductor-macos.sh

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: false  # Disabled until hardware available
        with:
          name: test-results-macos
          path: |
            integration/test/py/*.png
            integration/test/py/*.log
            integration/test/py/*.json
          retention-days: 30

      - name: Debug Test Environment
        if: failure()
        run: echo "macOS debug disabled - hardware not available"
        # run: integration/scripts/debug-test-environment-macos.sh

  download-artifacts-linux:
    name: Download Artifacts (Linux)
    timeout-minutes: 1
    runs-on:
      - self-hosted
      - Linux
    needs: build-ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: driver-linux
          path: ./binaries/
      
      - name: Download Server Artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: synnax-server-linux
          path: ./binaries/

      - name: Setup Linux Artifacts
        run: integration/scripts/download-artifacts-linux.sh

  deploy-and-test-linux:
    name: Deploy and Test (linux)
    runs-on:
      - self-hosted
      - Linux
    needs: download-artifacts-linux
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Force Quit Existing Synnax Processes
        run: integration/scripts/kill-synnax-processes-linux.sh

      - name: Install Poetry & Dependencies
        run: integration/scripts/install-poetry-deps-linux.sh

      - name: Start Synnax Server
        timeout-minutes: 1
        run: integration/scripts/start-synnax-server-linux.sh

      - name: Test Conductor
        id: test-conductor
        timeout-minutes: 5
        run: integration/scripts/run-test-conductor-linux.sh

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: steps.test-conductor.outcome == 'success' || steps.test-conductor.outcome == 'failure'
        with:
          name: test-results-linux
          path: |
            integration/test/py/*.png
            integration/test/py/*.log
            integration/test/py/*.json
          retention-days: 30

      - name: Debug Test Environment
        if: failure()
        run: integration/scripts/debug-test-environment-linux.sh