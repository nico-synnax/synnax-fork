name: Test - Integration

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      SKIP_BUILD:
        description: 'Skip build process and use artifacts from another run'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      REF_RUN_ID:
        description: 'Reference run ID for artifacts (when SKIP_BUILD is true)'
        required: false
        default: '0000000000'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_SCOPE: deploy-synnax
  SKIP_BUILD: false
  REF_RUN_ID: "0000000000"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      SKIP_BUILD: ${{ steps.set-outputs.outputs.SKIP_BUILD }}
      REF_RUN_ID: ${{ steps.set-outputs.outputs.REF_RUN_ID }}
    steps:
      - name: Set outputs
        id: set-outputs
        env:
          # Use workflow inputs if triggered manually, otherwise use env defaults
          SKIP_BUILD: ${{ github.event.inputs.SKIP_BUILD || env.SKIP_BUILD }}
          REF_RUN_ID: ${{ github.event.inputs.REF_RUN_ID || env.REF_RUN_ID }}
        run: |
          echo "SKIP_BUILD=${SKIP_BUILD}" >> $GITHUB_OUTPUT

          if [ "${SKIP_BUILD}" = "false" ]; then
            echo "REF_RUN_ID=${{ github.run_id }}" >> $GITHUB_OUTPUT
            echo "Variables set: SKIP_BUILD=${SKIP_BUILD}, REF_RUN_ID=${{ github.run_id }}"
          else
            echo "REF_RUN_ID=${REF_RUN_ID}" >> $GITHUB_OUTPUT
            echo "Variables set: SKIP_BUILD=${SKIP_BUILD}, REF_RUN_ID=${REF_RUN_ID}"
          fi

  lint-python:
    name: Lint - Python
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: integration/pyproject.toml
          cache: poetry
          cache-dependency-path: integration/poetry.lock

      - name: Install Dependencies
        run: poetry install
        working-directory: integration

      - name: isort
        run: poetry run isort -c .
        working-directory: integration

      - name: Format (Black)
        run: poetry run black --check --diff --color .
        working-directory: integration

      - name: Type Check (mypy)
        run: poetry run mypy . --ignore-missing-imports
        working-directory: integration

  confirm-host-ubuntu-latest:
    name: Confirm Host (ubuntu-latest)
    runs-on:
      - self-hosted
      - ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Confirm Host
        run: scripts/integration/confirm-host-unix.sh

  confirm-host-windows-latest:
    name: Confirm Host (windows-latest)
    runs-on:
      - self-hosted
      - windows-latest
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Confirm Host
        shell: cmd
        run: scripts/integration/confirm-host-windows.cmd

  confirm-host-macos-latest:
    name: Confirm Host (macos-latest)
    runs-on:
      - self-hosted
      - macos-latest
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Confirm Host
        run: scripts/integration/confirm-host-unix.sh

  build-ubuntu-latest:
    name: Build Synnax (ubuntu-latest)
    timeout-minutes: 75
    runs-on: ubuntu-latest
    needs: [setup, confirm-host-ubuntu-latest]
    steps:
      - name: Checkout Repository
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/checkout@v4

      - name: Update Submodules
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        run: git submodule update --init --recursive

      - name: Setup Bazel
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: true
          external-cache: true
          repository-cache: true

      - name: Set up Go
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache: true

      - name: Set up pnpm
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install Node Dependencies
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        run: pnpm install

      - name: Build Console Web Assets
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        run: pnpm build:console-vite

      - name: Copy Console Assets to Server
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        run: |
          cp -r console/dist/* core/pkg/service/console/dist/

      - name: Build Synnax (Ubuntu Latest)
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        id: version
        run: scripts/integration/build-unix-latest.sh

      - name: Skip Build (Ubuntu Latest)
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'true' }}
        run: echo "Build skipped - using reference artifacts"

      # - name: Upload Driver Binary as Artifact
      #   if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: driver-linux
      #     path: bazel-bin/driver/driver
      #     retention-days: 7
      #     if-no-files-found: error

      - name: Upload Server Binary as Artifact
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: synnax-core-linux
          path: core/synnax-v${{ steps.version.outputs.VERSION }}-linux
          retention-days: 7
          if-no-files-found: error

      - name: Debug Build Environment
        if: failure()
        run: scripts/integration/debug-build-environment-unix.sh

  build-windows-latest:
    name: Build Synnax (windows-latest)
    timeout-minutes: 75
    runs-on: windows-latest
    needs: [setup, confirm-host-windows-latest]
    steps:
      - name: Checkout Repository
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/checkout@v4

      - name: Setup Windows SDK
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        with:
          sdk-version: 22000

      - name: Update Submodules
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        run: git submodule update --init --recursive

      - name: Setup Bazel
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: true
          external-cache: true
          repository-cache: true


      - name: Set up Go
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache: true

      - name: Set up pnpm
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install Node Dependencies
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        run: pnpm install

      - name: Build Console Web Assets
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        run: pnpm build:console-vite

      - name: Copy Console Assets to Server
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        shell: cmd
        run: |
          xcopy /E /I /Y console\dist\* core\pkg\service\console\dist\

      - name: Build Driver (Windows)
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        run:
          bazel --output_user_root=C:/tmp build --enable_platform_specific_config -c opt
          --announce_rc //driver

      - name: Move Driver to Assets
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        shell: cmd
        run: |
          if not exist core\pkg\service\hardware\embedded\assets mkdir core\pkg\service\hardware\embedded\assets
          copy bazel-bin\driver\driver.exe core\pkg\service\hardware\embedded\assets\driver.exe

      - name: Get Version
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        id: version
        working-directory: core
        shell: cmd
        run: |
          for /f "tokens=*" %%i in (pkg\version\VERSION) do set VERSION=%%i
          echo VERSION=%VERSION%>> %GITHUB_OUTPUT%

      - name: Download Dependencies
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        working-directory: core
        run: go mod download

      - name: Build Core
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        working-directory: core
        run:
          go build -tags driver,console -o synnax-v${{
          steps.version.outputs.VERSION}}-windows.exe

      - name: Test Binary Execution
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        continue-on-error: true
        shell: cmd
        run: |
          echo Testing binary execution...
          core\synnax-v${{ steps.version.outputs.VERSION }}-windows.exe version || echo ⚠️ Core binary check failed
          bazel-bin\driver\driver.exe version || echo ⚠️ Driver binary check failed

      - name: Skip Build (Windows Latest)
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'true' }}
        run: echo "Build skipped - using reference artifacts"

      # - name: Upload Driver Binary as Artifact
      #   if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: driver-windows
      #     path: bazel-bin/driver/driver.exe
      #     retention-days: 7
      #     if-no-files-found: error

      - name: Upload Server Binary as Artifact
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: synnax-core-windows
          path: core/synnax-v${{ steps.version.outputs.VERSION }}-windows.exe
          retention-days: 7
          if-no-files-found: error

      - name: Debug Build Environment
        if: failure()
        shell: cmd
        run: scripts/integration/debug-build-environment-windows.cmd

  build-macos-latest:
    name: Build Synnax (macos-latest)
    timeout-minutes: 75
    runs-on: macos-latest
    needs: [setup, confirm-host-macos-latest]
    steps:
      - name: Checkout Repository
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/checkout@v4

      - name: Update Submodules
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        run: git submodule update --init --recursive

      - name: Setup Bazel
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: true
          external-cache: true
          repository-cache: true

      - name: Set up Go
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache: true

      - name: Set up pnpm
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install Node Dependencies
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        run: pnpm install

      - name: Build Console Web Assets
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        env:
          NODE_OPTIONS: --max_old_space_size=8192
        run: pnpm build:console-vite

      - name: Copy Console Assets to Server
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        run: |
          cp -r console/dist/* core/pkg/service/console/dist/

      - name: Build Synnax (macOS)
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        id: version
        run: scripts/integration/build-unix-latest.sh

      - name: Skip Build (macOS)
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'true' }}
        run: echo "Build skipped - using reference artifacts"

      # - name: Upload Driver Binary as Artifact
      #   if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: driver-macos
      #     path: bazel-bin/driver/driver
      #     retention-days: 7
      #     if-no-files-found: error

      - name: Upload Server Binary as Artifact
        if: ${{ needs.setup.outputs.SKIP_BUILD == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: synnax-core-macos
          path: core/synnax-v${{ steps.version.outputs.VERSION }}-macos
          retention-days: 7
          if-no-files-found: error

      - name: Debug Build Environment
        if: failure()
        run: scripts/integration/debug-build-environment-unix.sh

  download-artifacts-windows:
    name: Download Artifacts (Windows)
    timeout-minutes: 1
    runs-on:
      - self-hosted
      - windows-latest
    needs: [setup, build-windows-latest]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Force Quit Existing Synnax Processes (Windows)
        # Exists so we can leave synnax running in the future
        # and "tap in" to the test cases for debugging
        shell: cmd
        run: scripts/integration/kill-synnax-processes-windows.cmd

      - name: Download and Setup Windows Artifacts
        shell: cmd
        env:
          GH_TOKEN: ${{ github.token }}
          REF_RUN_ID: ${{ needs.setup.outputs.REF_RUN_ID }}
        run: scripts/integration/download-artifacts-windows.cmd

  deploy-and-test-windows:
    name: Deploy and Test (windows)
    runs-on:
      - self-hosted
      - windows-latest
    needs: download-artifacts-windows
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: integration/pyproject.toml

      - name: Install Poetry & Dependencies
        shell: cmd
        run: scripts/integration/install-poetry-deps-windows.cmd

      - name: Install Playwright
        shell: cmd
        run: scripts/integration/install-playwright-windows.cmd

      - name: Start Synnax Core
        timeout-minutes: 1
        shell: powershell
        env:
          SYNNAX_LICENSE_KEY: ${{ secrets.SYNNAX_LICENSE_KEY }}
        run: scripts/integration/start-synnax-core-windows.ps1

      - name: Test Conductor
        id: test-conductor
        timeout-minutes: 5
        shell: cmd
        env:
          PYTHONIOENCODING: utf-8
        run: scripts/integration/run-test-conductor-windows.cmd

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-windows
          path: |
            integration/*.png
            integration/*.log
            integration/*.json
          retention-days: 7

      - name: Debug Test Environment
        if: failure()
        shell: cmd
        run: scripts/integration/debug-test-environment-windows.cmd

  download-artifacts-macos:
    name: Download Artifacts (macos)
    timeout-minutes: 1
    runs-on:
      - self-hosted
      - macos-latest
    needs: [setup, build-macos-latest]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Force Quit Existing Synnax Processes
        # Exists so we can leave synnax running in the future
        # and "tap in" to the test cases for debugging
        run: scripts/integration/kill-synnax-processes-macos.sh

      - name: Download and Setup macOS Artifacts
        env:
          GH_TOKEN: ${{ github.token }}
          REF_RUN_ID: ${{ needs.setup.outputs.REF_RUN_ID }}
        run: scripts/integration/download-artifacts-macos.sh

  deploy-and-test-macos:
    name: Deploy and Test (macos)
    runs-on:
      - self-hosted
      - macos-latest
    if: false
    needs: download-artifacts-macos
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: integration/pyproject.toml

      - name: Install Poetry & Dependencies
        run: scripts/integration/install-poetry-deps-unix.sh

      - name: Install Playwright
        run: scripts/integration/install-playwright-unix.sh

      - name: Start Synnax Core
        timeout-minutes: 1
        env:
          SYNNAX_LICENSE_KEY: ${{ secrets.SYNNAX_LICENSE_KEY }}
        run: scripts/integration/start-synnax-core-unix.sh

      - name: Test Conductor
        id: test-conductor
        timeout-minutes: 5
        run: scripts/integration/run-test-conductor-unix.sh

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-macos
          path: |
            integration/*.png
            integration/*.log
            integration/*.json
          retention-days: 7

      - name: Debug Test Environment
        if: failure()
        run: scripts/integration/debug-test-environment-unix.sh

  download-artifacts-ubuntu:
    name: Download Artifacts (Ubuntu-Latest)
    timeout-minutes: 1
    runs-on:
      - self-hosted
      - ubuntu-latest
    needs: [setup, build-ubuntu-latest]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Force Quit Existing Synnax Processes
        continue-on-error: true
        # Exists so we can leave synnax running in the future
        # and "tap in" to the test cases for debugging
        run: scripts/integration/kill-synnax-processes-linux.sh

      - name: Download and Setup Linux Artifacts
        env:
          GH_TOKEN: ${{ github.token }}
          REF_RUN_ID: ${{ needs.setup.outputs.REF_RUN_ID }}
        run: scripts/integration/download-artifacts-linux.sh

  deploy-and-test-ubuntu:
    name: Deploy and Test (ubuntu)
    runs-on:
      - self-hosted
      - ubuntu-latest
    needs: download-artifacts-ubuntu
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: integration/pyproject.toml

      - name: Install Poetry & Dependencies
        run: scripts/integration/install-poetry-deps-unix.sh

      - name: Install Playwright
        run: scripts/integration/install-playwright-unix.sh

      - name: Start Synnax Core
        timeout-minutes: 1
        env:
          SYNNAX_LICENSE_KEY: ${{ secrets.SYNNAX_LICENSE_KEY }}
        run: scripts/integration/start-synnax-core-unix.sh

      - name: Test Conductor
        id: test-conductor
        timeout-minutes: 5
        run: scripts/integration/run-test-conductor-unix.sh

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-linux
          path: |
            integration/*.png
            integration/*.log
            integration/*.json
          retention-days: 7

      - name: Debug Test Environment
        if: failure()
        run: scripts/integration/debug-test-environment-unix.sh