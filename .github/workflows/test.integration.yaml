name: Test - Integration (End-to-End)

on:
  push:
    branches:
      - "sy-2769-integration-test-development"
  workflow_dispatch:

env:
  CACHE_SCOPE: build-synnax

jobs:
  build:
    name: Build Synnax
    runs-on: [self-hosted, linux]
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Force Quit Synnax Processes
        run: |
          mkdir -p $HOME/Desktop
          rm -rf $HOME/Desktop/*
          echo "Checking for existing synnax processes..."
          if pgrep -f "synnax" > /dev/null; then
            echo "Found synnax processes. Terminating..."
            pkill -f "synnax" || true
            sleep 2
            # Force kill if still running
            if pgrep -f "synnax" > /dev/null; then
              echo "Force killing remaining synnax processes..."
              pkill -9 -f "synnax" || true
            fi
            echo "All synnax processes terminated."
          else
            echo "No synnax processes found."
          fi

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc \
            g++ \
            cmake \
            libsystemd-dev \
            pkg-config

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ env.CACHE_SCOPE }}-self-hosted-linux
          repository-cache: true

      - name: Build Driver
        run: |
          bazel build --enable_platform_specific_config -c opt --config=hide_symbols --announce_rc //driver

      - name: Get Version
        id: version
        working-directory: synnax
        run: |
          echo "VERSION=$(cat pkg/version/VERSION)" >> $GITHUB_OUTPUT

      - name: Move Driver to Assets
        run: |
          mkdir -p synnax/pkg/service/hardware/embedded/assets
          cp bazel-bin/driver/driver synnax/pkg/service/hardware/embedded/assets/driver

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: go.work.sum

      - name: Download Go Dependencies
        working-directory: synnax
        run: go mod download

      - name: Build Synnax Server
        working-directory: synnax
        run: |
          go build -tags driver -o synnax-v${{ steps.version.outputs.VERSION }}-linux

      - name: Copy Binaries to Desktop
        run: |      
          cp bazel-bin/driver/driver $HOME/Desktop/synnax-driver
          cp synnax/synnax-v${{ steps.version.outputs.VERSION }}-linux $HOME/Desktop/synnax
          echo "Binaries created in $HOME/Desktop:"
          ls -la $HOME/Desktop/synnax*

  deploy:
    name: Deploy Synnax Service
    runs-on: [self-hosted, linux]
    needs: build
    steps:
      - name: Install and Start Synnax as Service
        run: |
          echo "Creating systemd service for Synnax..."
          sudo tee /etc/systemd/system/synnax.service > /dev/null <<EOF
          [Unit]
          Description=Synnax Server
          After=network.target
          
          [Service]
          Type=simple
          User=$USER
          WorkingDirectory=$HOME/Desktop
          ExecStart=$HOME/Desktop/synnax start -mi
          Restart=always
          RestartSec=5
          StandardOutput=journal
          StandardError=journal
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          sudo systemctl daemon-reload
          sudo systemctl stop synnax || true
          sudo systemctl enable synnax
          sudo systemctl start synnax
          sleep 10
          sudo systemctl status synnax
          echo "Synnax service installed and started"
          echo "Check logs with: sudo journalctl -u synnax -f"
          echo "Manage service with: sudo systemctl [start|stop|restart|status] synnax"

  test:
    name: Run Test Conductor
    runs-on: [self-hosted, linux]
    needs: deploy
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Submodules
        run: git submodule update --init --recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Set up Poetry
        run: |
          sudo apt-get update
          sudo apt-get install -y curl python3-pip
          curl -sSL https://install.python-poetry.org | python3 -
          
          # Add Poetry to PATH for this session
          export PATH="$HOME/.local/bin:$PATH"
          
          # Verify installation
          poetry --version

      - name: Check System Python
        run: |
          echo "=== System Python Info ==="
          python3 --version
          python3 -c "import sys; print(f'Python path: {sys.executable}')"
          
          echo "=== System Pydantic Check ==="
          python3 -c "import pydantic; print(f'System Pydantic: {pydantic.__version__}')" 2>/dev/null || echo "No system Pydantic found"
          
          echo "=== Poetry Python Info ==="
          cd integration/py
          export PATH="$HOME/.local/bin:$PATH"
          poetry env info
          poetry run python -c "import sys; print(f'Poetry Python path: {sys.executable}')"

      - name: Install Dependencies
        working-directory: integration/py
        run: |
          # Ensure Poetry is in PATH
          export PATH="$HOME/.local/bin:$PATH"
          
          # Clean any existing virtual environment and reinstall
          poetry env remove --all || true
          
          # Force install the correct Pydantic version first
          poetry add "pydantic>=2.11.5,<3.0" --no-cache
          
          # Install all other dependencies
          poetry install --no-cache
          
          # Verify Pydantic version
          poetry run python -c "import pydantic; print(f'Pydantic version: {pydantic.__version__}')"
          
          # Check what's actually installed
          poetry show pydantic

      - name: Debug Imports
        working-directory: integration/py
        run: |
          # Ensure Poetry is in PATH for this step
          export PATH="$HOME/.local/bin:$PATH"
          
          # Check what's available in synnax module
          poetry run python -c "
          try:
              import synnax
              print('Synnax imported successfully')
              print(f'Synnax version: {synnax.__version__}')
          except Exception as e:
              print(f'Error importing synnax: {e}')
              import traceback
              traceback.print_exc()
          "

      - name: Run Conductor Test
        working-directory: integration/test/py/framework
        run: |
          # Ensure Poetry is in PATH for this step
          export PATH="$HOME/.local/bin:$PATH"
          
          # Run the test from the correct directory, pointing to the pyproject.toml location
          poetry run --directory ../../py python3 framework/Test_Conducter.py --name test_conductor --sequence ../testcases/basic_tests.json