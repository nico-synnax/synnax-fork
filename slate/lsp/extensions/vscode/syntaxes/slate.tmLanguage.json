{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Slate",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#types"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#tasks"
    },
    {
      "include": "#channels"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.slate",
          "match": "//.*$"
        },
        {
          "name": "comment.block.slate",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.slate",
          "match": "\\b(if|else|return)\\b"
        },
        {
          "name": "keyword.other.slate",
          "match": "\\b(func|task)\\b"
        },
        {
          "name": "constant.language.boolean.slate",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.slate",
          "match": "\\bnull\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.slate",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.slate",
              "match": "\\\\([\\\\\"/bfnrt]|u[0-9a-fA-F]{4})"
            }
          ]
        },
        {
          "name": "string.quoted.single.slate",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.slate",
              "match": "\\\\([\\\\'bfnrt]|u[0-9a-fA-F]{4})"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.temporal.slate",
          "match": "\\b(\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][+-]?\\d+(_\\d+)*)?)(ns|us|ms|s|m|h|hz|khz|mhz)\\b",
          "captures": {
            "1": {
              "name": "constant.numeric.float.slate"
            },
            "6": {
              "name": "keyword.other.unit.slate"
            }
          }
        },
        {
          "name": "constant.numeric.hex.slate",
          "match": "\\b0[xX][0-9a-fA-F]+(_[0-9a-fA-F]+)*\\b"
        },
        {
          "name": "constant.numeric.binary.slate",
          "match": "\\b0[bB][01]+(_[01]+)*\\b"
        },
        {
          "name": "constant.numeric.float.slate",
          "match": "\\b\\d+(_\\d+)*\\.\\d+(_\\d+)*([eE][+-]?\\d+(_\\d+)*)?\\b"
        },
        {
          "name": "constant.numeric.integer.slate",
          "match": "\\b\\d+(_\\d+)*\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.slate",
          "match": "\\b(i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|string|timestamp|timespan|bool)\\b"
        },
        {
          "name": "support.type.composite.slate",
          "match": "\\b(series|chan)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.slate",
          "match": "[+\\-*/%]|\\*\\*"
        },
        {
          "name": "keyword.operator.comparison.slate",
          "match": "==|!=|<=?|>=?"
        },
        {
          "name": "keyword.operator.logical.slate",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.bitwise.slate",
          "match": "&|\\||\\^|~|<<|>>"
        },
        {
          "name": "keyword.operator.assignment.slate",
          "match": "="
        },
        {
          "name": "keyword.operator.channel.slate",
          "match": "<-|->"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.slate",
          "begin": "\\b(func)\\s+(\\w+)\\s*\\(",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.slate"
            },
            "2": {
              "name": "entity.name.function.slate"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        },
        {
          "name": "support.function.builtin.slate",
          "match": "\\b(len|now)\\b(?=\\s*\\()"
        },
        {
          "name": "entity.name.function.slate",
          "match": "\\b\\w+\\b(?=\\s*\\()"
        }
      ]
    },
    "tasks": {
      "patterns": [
        {
          "name": "meta.task.slate",
          "begin": "\\b(task)\\s+(\\w+)\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.slate"
            },
            "2": {
              "name": "entity.name.function.slate"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "channels": {
      "patterns": [
        {
          "name": "support.type.channel.slate",
          "match": "(<-)?chan|chan(<-)?",
          "captures": {
            "1": {
              "name": "keyword.operator.channel.slate"
            },
            "2": {
              "name": "keyword.operator.channel.slate"
            }
          }
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.slate",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "function-parameters": {
      "patterns": [
        {
          "include": "#types"
        },
        {
          "include": "#identifiers"
        },
        {
          "name": "punctuation.separator.slate",
          "match": ","
        }
      ]
    }
  },
  "scopeName": "source.slate"
}